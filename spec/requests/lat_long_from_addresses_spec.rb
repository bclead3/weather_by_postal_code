# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/lat_long_from_addresses', type: :request do
  # LatLongFromAddress. As you add validations to LatLongFromAddress, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    { address: '821 Marquette Avenue', city: 'Minneapolis' }
  end

  let(:invalid_attributes) do
    skip('Add a hash of attributes invalid for your model')
  end

  let(:foshay_response_hash) do
    [
      {
        place_id: 324_648_326,
        licence: 'Data Â© OpenStreetMap contributors, ODbL 1.0. https://osm.org/copyright',
        osm_type: 'way',
        osm_id: 6_027_555,
        boundingbox: [
          '44.9772805',
          '44.979212',
          '-93.2700841',
          '-93.26845'
        ],
        lat: '44.9782466',
        lon: '-93.2692576',
        display_name: 'Marquette Avenue South, Minneapolis, Hennepin County, Minnesota, 55401, United States',
        class: 'highway',
        type: 'tertiary',
        importance: 0.41000000000000003,
        address: {
          road: 'Marquette Avenue South',
          city: 'Minneapolis',
          county: 'Hennepin County',
          state: 'Minnesota',
          postcode: '55401',
          country: 'United States',
          country_code: 'us'
        }
      }
    ]
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      LatLongFromAddress.create! valid_attributes
      get lat_long_from_addresses_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      stub_request(:get, 'https://nominatim.openstreetmap.org/search?addressdetails=1&format=json&polygon=1&q=821%2BMarquette%2BAvenue,%2BMinneapolis')
        .with(
          headers: {
            'Accept' => '*/*',
            'Accept-Encoding' => 'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
            'User-Agent' => 'Ruby'
          }
        )
        .to_return(status: 200, body: foshay_response_hash.to_json, headers: {})
      lat_long_from_address = LatLongFromAddress.create! valid_attributes
      get lat_long_from_address_url(lat_long_from_address)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_lat_long_from_address_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'render a successful response' do
      lat_long_from_address = LatLongFromAddress.create! valid_attributes
      get edit_lat_long_from_address_url(lat_long_from_address)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    let(:station_hash) do
      { '@context' =>
         ['https://geojson.org/geojson-ld/geojson-context.jsonld',
          { '@version' => '1.1',
            'wx' => 'https://api.weather.gov/ontology#',
            's' => 'https://schema.org/',
            'geo' => 'http://www.opengis.net/ont/geosparql#',
            'unit' => 'http://codes.wmo.int/common/unit/',
            '@vocab' => 'https://api.weather.gov/ontology#',
            'geometry' => { '@id' => 's:GeoCoordinates', '@type' => 'geo:wktLiteral' },
            'city' => 's:addressLocality',
            'state' => 's:addressRegion',
            'distance' => { '@id' => 's:Distance', '@type' => 's:QuantitativeValue' },
            'bearing' => { '@type' => 's:QuantitativeValue' },
            'value' => { '@id' => 's:value' },
            'unitCode' => { '@id' => 's:unitCode', '@type' => '@id' },
            'forecastOffice' => { '@type' => '@id' },
            'forecastGridData' => { '@type' => '@id' },
            'publicZone' => { '@type' => '@id' },
            'county' => { '@type' => '@id' } }],
        'id' => 'https://api.weather.gov/points/44.9782,-93.2693',
        'type' => 'Feature',
        'geometry' => { 'type' => 'Point', 'coordinates' => [-93.2693, 44.9782] },
        'properties' =>
         { '@id' => 'https://api.weather.gov/points/44.9782,-93.2693',
           '@type' => 'wx:Point',
           'cwa' => 'MPX',
           'forecastOffice' => 'https://api.weather.gov/offices/MPX',
           'gridId' => 'MPX',
           'gridX' => 107,
           'gridY' => 71,
           'forecast' => 'https://api.weather.gov/gridpoints/MPX/107,71/forecast',
           'forecastHourly' => 'https://api.weather.gov/gridpoints/MPX/107,71/forecast/hourly',
           'forecastGridData' => 'https://api.weather.gov/gridpoints/MPX/107,71',
           'observationStations' => 'https://api.weather.gov/gridpoints/MPX/107,71/stations',
           'relativeLocation' =>
            { 'type' => 'Feature',
              'geometry' => { 'type' => 'Point', 'coordinates' => [-93.26832, 44.963324] },
              'properties' => { 'city' => 'Minneapolis', 'state' => 'MN',
                                'distance' => { 'unitCode' => 'wmoUnit:m', 'value' => 1655.9336213929 }, 'bearing' => { 'unitCode' => 'wmoUnit:degree_(angle)', 'value' => 357 } } },
           'forecastZone' => 'https://api.weather.gov/zones/forecast/MNZ060',
           'county' => 'https://api.weather.gov/zones/county/MNC053',
           'fireWeatherZone' => 'https://api.weather.gov/zones/fire/MNZ060',
           'timeZone' => 'America/Chicago',
           'radarStation' => 'KMPX' } }
    end

    context 'with valid parameters' do
      it 'creates a new LatLongFromAddress' do
        stub_request(:get, 'https://nominatim.openstreetmap.org/search?addressdetails=1&format=json&polygon=1&q=821%2BMarquette%2BAvenue,%2BMinneapolis')
          .with(
            headers: {
              'Accept' => '*/*',
              'Accept-Encoding' => 'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
              'User-Agent' => 'Ruby'
            }
          )
          .to_return(status: 200, body: foshay_response_hash.to_json, headers: {})

        stub_request(:get, 'https://api.weather.gov/points/44.9782,-93.2693')
          .with(
            headers: {
              'Accept' => '*/*',
              'Accept-Encoding' => 'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
              'User-Agent' => 'Ruby'
            }
          )
          .to_return(status: 200, body: station_hash.to_json, headers: {})
        expect do
          post lat_long_from_addresses_url, params: { lat_long_from_address: valid_attributes }
        end.to change(LatLongFromAddress, :count).by(1)
      end

      it 'redirects to the created lat_long_from_address' do
        stub_request(:get, 'https://nominatim.openstreetmap.org/search?addressdetails=1&format=json&polygon=1&q=821%2BMarquette%2BAvenue,%2BMinneapolis')
          .with(
            headers: {
              'Accept' => '*/*',
              'Accept-Encoding' => 'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
              'User-Agent' => 'Ruby'
            }
          )
          .to_return(status: 200, body: foshay_response_hash.to_json, headers: {})

        stub_request(:get, 'https://api.weather.gov/points/44.9782,-93.2693')
          .with(
            headers: {
              'Accept' => '*/*',
              'Accept-Encoding' => 'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
              'User-Agent' => 'Ruby'
            }
          )
          .to_return(status: 200, body: station_hash.to_json, headers: {})

        post lat_long_from_addresses_url, params: { lat_long_from_address: valid_attributes }
        expect(response).to redirect_to(lat_long_from_address_url(LatLongFromAddress.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new LatLongFromAddress' do
        expect do
          post lat_long_from_addresses_url, params: { lat_long_from_address: invalid_attributes }
        end.to change(LatLongFromAddress, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post lat_long_from_addresses_url, params: { lat_long_from_address: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        skip('Add a hash of attributes valid for your model')
      end

      it 'updates the requested lat_long_from_address' do
        lat_long_from_address = LatLongFromAddress.create! valid_attributes
        patch lat_long_from_address_url(lat_long_from_address), params: { lat_long_from_address: new_attributes }
        lat_long_from_address.reload
        skip('Add assertions for updated state')
      end

      it 'redirects to the lat_long_from_address' do
        lat_long_from_address = LatLongFromAddress.create! valid_attributes
        patch lat_long_from_address_url(lat_long_from_address), params: { lat_long_from_address: new_attributes }
        lat_long_from_address.reload
        expect(response).to redirect_to(lat_long_from_address_url(lat_long_from_address))
      end
    end

    context 'with invalid parameters' do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        lat_long_from_address = LatLongFromAddress.create! valid_attributes
        patch lat_long_from_address_url(lat_long_from_address), params: { lat_long_from_address: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested lat_long_from_address' do
      lat_long_from_address = LatLongFromAddress.create! valid_attributes
      expect do
        delete lat_long_from_address_url(lat_long_from_address)
      end.to change(LatLongFromAddress, :count).by(-1)
    end

    it 'redirects to the lat_long_from_addresses list' do
      lat_long_from_address = LatLongFromAddress.create! valid_attributes
      delete lat_long_from_address_url(lat_long_from_address)
      expect(response).to redirect_to(lat_long_from_addresses_url)
    end
  end
end
